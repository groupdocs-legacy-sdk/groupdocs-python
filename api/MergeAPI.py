#!/usr/bin/env python
"""
MergeAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class MergeAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def AddJobDocumentDataSource(self, userId, jobId, fileId, datasourceId, ):
        """Add job document datasource
        Args:
            userId -- User GUID
            jobId -- Job id
            fileId -- File GUID
            datasourceId -- Datasource id

        Return:
            AddDocumentDataSourceResponse -- an instance of AddDocumentDataSourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/jobs/{jobId}/files/{fileId}/datasources/{datasourceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if datasourceId != None:
            resourcePath = resourcePath.replace('{datasourceId}', datasourceId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDocumentDataSourceResponse')
        return responseObject


    def AddJobDocumentDataSourceFields(self, userId, jobId, fileId, postData, ):
        """Add job document datasource fields
        Args:
            userId -- User GUID
            jobId -- Job id
            fileId -- File GUID
            postData -- Fields

        Return:
            AddDocumentDataSourceResponse -- an instance of AddDocumentDataSourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/jobs/{jobId}/files/{fileId}/datasources'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDocumentDataSourceResponse')
        return responseObject


    def MergeDatasource(self, mergeMergeInputFilesInputDatasourcesInput=None, ):
        """Merge datasource
        Args:
            mergeMergeInputFilesInputDatasourcesInput -- 

        Return:
            MergeTemplateResponse -- an instance of MergeTemplateResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/files/{fileId}/datasources/{datasourceId}?new_type={targetType}&email_results={emailResults}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if mergeMergeInputFilesInputDatasourcesInput != None and mergeMergeInputFilesInputDatasourcesInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', mergeMergeInputFilesInputDatasourcesInput.userId)
        if mergeMergeInputFilesInputDatasourcesInput != None and mergeMergeInputFilesInputDatasourcesInput.fileId != None:
            resourcePath = resourcePath.replace('{fileId}', mergeMergeInputFilesInputDatasourcesInput.fileId)
        if mergeMergeInputFilesInputDatasourcesInput != None and mergeMergeInputFilesInputDatasourcesInput.datasourceId != None:
            resourcePath = resourcePath.replace('{datasourceId}', mergeMergeInputFilesInputDatasourcesInput.datasourceId)
        if mergeMergeInputFilesInputDatasourcesInput != None and mergeMergeInputFilesInputDatasourcesInput.targetType != None:
            resourcePath = resourcePath.replace('{targetType}', mergeMergeInputFilesInputDatasourcesInput.targetType)
        if mergeMergeInputFilesInputDatasourcesInput != None and mergeMergeInputFilesInputDatasourcesInput.emailResults != None:
            resourcePath = resourcePath.replace('{emailResults}', mergeMergeInputFilesInputDatasourcesInput.emailResults)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'MergeTemplateResponse')
        return responseObject


    def MergeDatasourceFields(self, postData, mergeMergeInputFilesInput=None, ):
        """Merge datasource fields
        Args:
            postData -- Fields
            mergeMergeInputFilesInput -- 

        Return:
            MergeTemplateResponse -- an instance of MergeTemplateResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/files/{fileId}/datasources?new_type={targetType}&email_results={emailResults}&assembly_name={assemblyName}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if mergeMergeInputFilesInput != None and mergeMergeInputFilesInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', mergeMergeInputFilesInput.userId)
        if mergeMergeInputFilesInput != None and mergeMergeInputFilesInput.fileId != None:
            resourcePath = resourcePath.replace('{fileId}', mergeMergeInputFilesInput.fileId)
        if mergeMergeInputFilesInput != None and mergeMergeInputFilesInput.targetType != None:
            resourcePath = resourcePath.replace('{targetType}', mergeMergeInputFilesInput.targetType)
        if mergeMergeInputFilesInput != None and mergeMergeInputFilesInput.emailResults != None:
            resourcePath = resourcePath.replace('{emailResults}', mergeMergeInputFilesInput.emailResults)
        if mergeMergeInputFilesInput != None and mergeMergeInputFilesInput.assemblyName != None:
            resourcePath = resourcePath.replace('{assemblyName}', mergeMergeInputFilesInput.assemblyName)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'MergeTemplateResponse')
        return responseObject


    def GetQuestionnaire(self, userId, questionnaireId, ):
        """Get questionnaire
        Args:
            userId -- User GUID
            questionnaireId -- Questionnaire id

        Return:
            GetQuestionnaireResponse -- an instance of GetQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/{questionnaireId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetQuestionnaireResponse')
        return responseObject


    def GetQuestionnaires(self, userId, ):
        """Get questionnaires
        Args:
            userId -- User GUID

        Return:
            GetQuestionnairesResponse -- an instance of GetQuestionnairesResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetQuestionnairesResponse')
        return responseObject


    def CreateQuestionnaire(self, userId, postData, ):
        """Create questionnaire
        Args:
            userId -- User GUID
            postData -- Questionnaire

        Return:
            CreateQuestionnaireResponse -- an instance of CreateQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreateQuestionnaireResponse')
        return responseObject


    def UpdateQuestionnaire(self, userId, questionnaireId, postData, ):
        """Update questionnaire
        Args:
            userId -- User GUID
            questionnaireId -- Questionnaire id
            postData -- Questionnaire

        Return:
            UpdateQuestionnaireResponse -- an instance of UpdateQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/{questionnaireId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateQuestionnaireResponse')
        return responseObject


    def DeleteQuestionnaire(self, userId, questionnaireId, ):
        """Delete questionnaire
        Args:
            userId -- User GUID
            questionnaireId -- Questionnaire id

        Return:
            DeleteQuestionnaireResponse -- an instance of DeleteQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/{questionnaireId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DeleteQuestionnaireResponse')
        return responseObject


    def GetDocumentQuestionnaires(self, userId, fileId, ):
        """Get document questionnaires
        Args:
            userId -- User GUID
            fileId -- File GUID

        Return:
            GetDocumentQuestionnairesResponse -- an instance of GetDocumentQuestionnairesResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/files/{fileId}/questionnaires'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetDocumentQuestionnairesResponse')
        return responseObject


    def CreateDocumentQuestionnaire(self, userId, fileId, postData, ):
        """Create document questionnaire
        Args:
            userId -- User GUID
            fileId -- File GUID
            postData -- Questionnaire

        Return:
            AddDocumentQuestionnaireResponse -- an instance of AddDocumentQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/files/{fileId}/questionnaires'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDocumentQuestionnaireResponse')
        return responseObject


    def AddDocumentQuestionnaire(self, userId, fileId, questionnaireId, ):
        """Add document questionnaire
        Args:
            userId -- User GUID
            fileId -- File GUID
            questionnaireId -- Questionnaire id

        Return:
            AddDocumentQuestionnaireResponse -- an instance of AddDocumentQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/files/{fileId}/questionnaires/{questionnaireId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDocumentQuestionnaireResponse')
        return responseObject


    def DeleteDocumentQuestionnaire(self, userId, fileId, questionnaireId, ):
        """Delete document questionnaire
        Args:
            userId -- User GUID
            fileId -- File GUID
            questionnaireId -- Questionnaire id

        Return:
            DeleteDocumentQuestionnaireResponse -- an instance of DeleteDocumentQuestionnaireResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/files/{fileId}/questionnaires/{questionnaireId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DeleteDocumentQuestionnaireResponse')
        return responseObject


    def AddDataSource(self, userId, postData, ):
        """Add datasource
        Args:
            userId -- User GUID
            postData -- Datasource

        Return:
            AddDatasourceResponse -- an instance of AddDatasourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/datasources'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDatasourceResponse')
        return responseObject


    def UpdateDataSource(self, userId, datasourceId, postData, ):
        """Update datasource
        Args:
            userId -- User GUID
            datasourceId -- Datasource id
            postData -- Datasource

        Return:
            AddDatasourceResponse -- an instance of AddDatasourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/datasources/{datasourceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if datasourceId != None:
            resourcePath = resourcePath.replace('{datasourceId}', datasourceId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDatasourceResponse')
        return responseObject


    def UpdateDataSourceFields(self, userId, datasourceId, postData, ):
        """Update datasource fields
        Args:
            userId -- User GUID
            datasourceId -- Datasource id
            postData -- Datasource

        Return:
            AddDatasourceResponse -- an instance of AddDatasourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/datasources/{datasourceId}/fields'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if datasourceId != None:
            resourcePath = resourcePath.replace('{datasourceId}', datasourceId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddDatasourceResponse')
        return responseObject


    def DeleteDataSource(self, userId, datasourceId, ):
        """Delete datasource fields
        Args:
            userId -- User GUID
            datasourceId -- Datasource id

        Return:
            DeleteDatasourceResponse -- an instance of DeleteDatasourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/datasources/{datasourceId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if datasourceId != None:
            resourcePath = resourcePath.replace('{datasourceId}', datasourceId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DeleteDatasourceResponse')
        return responseObject


    def GetDataSource(self, userId, datasourceId, fields, ):
        """Get datasource
        Args:
            userId -- User GUID
            datasourceId -- Datasource id
            fields -- Fields

        Return:
            GetDatasourceResponse -- an instance of GetDatasourceResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/datasources/{datasourceId}?field={fields}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if datasourceId != None:
            resourcePath = resourcePath.replace('{datasourceId}', datasourceId)
        if fields != None:
            resourcePath = resourcePath.replace('{fields}', fields)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetDatasourceResponse')
        return responseObject


    def GetQuestionnaireDataSources(self, userId, questionnaireId, includeFields, ):
        """Get questionnaire datasources
        Args:
            userId -- User GUID
            questionnaireId -- QuestionnaireId id
            includeFields -- Include fields

        Return:
            GetDatasourcesResponse -- an instance of GetDatasourcesResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/{questionnaireId}/datasources?include_fields={includeFields}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)
        if includeFields != None:
            resourcePath = resourcePath.replace('{includeFields}', includeFields)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetDatasourcesResponse')
        return responseObject


    def AddQuestionnaireExecution(self, userId, questionnaireId, postData, ):
        """Add questionnaire execution
        Args:
            userId -- User GUID
            questionnaireId -- Questionnaire id
            postData -- Execution

        Return:
            AddQuestionnaireExecutionResponse -- an instance of AddQuestionnaireExecutionResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/{questionnaireId}/executions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if questionnaireId != None:
            resourcePath = resourcePath.replace('{questionnaireId}', questionnaireId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddQuestionnaireExecutionResponse')
        return responseObject


    def GetQuestionnaireExecutions(self, userId, ):
        """Get questionnaire executions
        Args:
            userId -- User GUID

        Return:
            GetQuestionnaireExecutionsResponse -- an instance of GetQuestionnaireExecutionsResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/executions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetQuestionnaireExecutionsResponse')
        return responseObject


    def UpdateQuestionnaireExecution(self, userId, executionId, postData, ):
        """Update questionnaire execution
        Args:
            userId -- User GUID
            executionId -- Execution id
            postData -- Execution

        Return:
            UpdateQuestionnaireExecutionResponse -- an instance of UpdateQuestionnaireExecutionResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/executions/{executionId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if executionId != None:
            resourcePath = resourcePath.replace('{executionId}', executionId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateQuestionnaireExecutionResponse')
        return responseObject


    def UpdateQuestionnaireExecutionStatus(self, userId, executionId, postData, ):
        """Update questionnaire execution status
        Args:
            userId -- User GUID
            executionId -- Execution id
            postData -- Status

        Return:
            UpdateQuestionnaireExecutionResponse -- an instance of UpdateQuestionnaireExecutionResponse"""

        # Parse inputs
        resourcePath = '/merge/{userId}/questionnaires/executions/{executionId}/status'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if executionId != None:
            resourcePath = resourcePath.replace('{executionId}', executionId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateQuestionnaireExecutionResponse')
        return responseObject


