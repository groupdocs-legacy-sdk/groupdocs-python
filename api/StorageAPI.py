#!/usr/bin/env python
"""
StorageAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class StorageAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetStorageInfo(self, userId, ):
        """Get storage info
        Args:
            userId -- User GUID

        Return:
            StorageInfoResponse -- an instance of StorageInfoResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'StorageInfoResponse')
        return responseObject


    def ListEntities(self, storageStorageInputFoldersInput=None, ):
        """List entities
        Args:
            storageStorageInputFoldersInput -- 

        Return:
            ListEntitiesResponse -- an instance of ListEntitiesResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/folders/{*path}?page={pageIndex}&count={pageSize}&order_by={orderBy}&order_asc={orderAsc}&filter={filter}&file_types={fileTypes}&extended={extended}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', storageStorageInputFoldersInput.userId)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.path != None:
            resourcePath = resourcePath.replace('{path}', storageStorageInputFoldersInput.path)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.pageIndex != None:
            resourcePath = resourcePath.replace('{pageIndex}', storageStorageInputFoldersInput.pageIndex)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', storageStorageInputFoldersInput.pageSize)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.orderBy != None:
            resourcePath = resourcePath.replace('{orderBy}', storageStorageInputFoldersInput.orderBy)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.orderAsc != None:
            resourcePath = resourcePath.replace('{orderAsc}', storageStorageInputFoldersInput.orderAsc)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.filter != None:
            resourcePath = resourcePath.replace('{filter}', storageStorageInputFoldersInput.filter)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.fileTypes != None:
            resourcePath = resourcePath.replace('{fileTypes}', storageStorageInputFoldersInput.fileTypes)
        if storageStorageInputFoldersInput != None and storageStorageInputFoldersInput.extended != None:
            resourcePath = resourcePath.replace('{extended}', storageStorageInputFoldersInput.extended)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ListEntitiesResponse')
        return responseObject


    def GetFile(self, userId, fileId, ):
        """Get file
        Args:
            userId -- User GUID
            fileId -- File ID

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/storage/{userId}/files/{fileId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def GetSharedFile(self, userEmail, filePath, ):
        """Get shared file
        Args:
            userEmail -- User Email
            filePath -- File path

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/storage/shared/{userEmail}/{*filePath}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userEmail != None:
            resourcePath = resourcePath.replace('{userEmail}', userEmail)
        if filePath != None:
            resourcePath = resourcePath.replace('{filePath}', filePath)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def Upload(self, userId, path, description, postData, ):
        """Upload
        Args:
            userId -- User GUID
            path -- Path
            description -- Description
            postData -- Stream

        Return:
            UploadResponse -- an instance of UploadResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/folders/{*path}?description={description}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)
        if description != None:
            resourcePath = resourcePath.replace('{description}', description)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UploadResponse')
        return responseObject


    def UploadWeb(self, userId, url, ):
        """Upload Web
        Args:
            userId -- User GUID
            url -- Url

        Return:
            UploadResponse -- an instance of UploadResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/urls?url={url}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if url != None:
            resourcePath = resourcePath.replace('{url}', url)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UploadResponse')
        return responseObject


    def Delete(self, userId, fileId, ):
        """Delete
        Args:
            userId -- User GUID
            fileId -- File ID

        Return:
            DeleteResponse -- an instance of DeleteResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/files/{fileId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DeleteResponse')
        return responseObject


    def DeleteFromFolder(self, userId, path, ):
        """Delete from folder
        Args:
            userId -- User GUID
            path -- Path

        Return:
            DeleteResponse -- an instance of DeleteResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/folders/{*path}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DeleteResponse')
        return responseObject


    def MoveFile(self, userId, path, mode, ):
        """Move file
        Args:
            userId -- User GUID
            path -- Path
            mode -- Mode

        Return:
            FileMoveResponse -- an instance of FileMoveResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/files/{*path}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)
        if mode != None:
            resourcePath = resourcePath.replace('{mode}', mode)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'FileMoveResponse')
        return responseObject


    def MoveFolder(self, userId, path, mode, ):
        """Move folder
        Args:
            userId -- User GUID
            path -- Path
            mode -- Mode

        Return:
            FolderMoveResponse -- an instance of FolderMoveResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/folders/{*path}?override_mode={mode}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)
        if mode != None:
            resourcePath = resourcePath.replace('{mode}', mode)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'FolderMoveResponse')
        return responseObject


    def Create(self, userId, path, ):
        """Create
        Args:
            userId -- User GUID
            path -- Path

        Return:
            CreateFolderResponse -- an instance of CreateFolderResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/paths/{*path}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreateFolderResponse')
        return responseObject


    def Compress(self, userId, archiveType, ):
        """Compress
        Args:
            userId -- User GUID
            archiveType -- Archive type

        Return:
            CompressResponse -- an instance of CompressResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/files/{fileId}/archive/{archiveType}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if archiveType != None:
            resourcePath = resourcePath.replace('{archiveType}', archiveType)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CompressResponse')
        return responseObject


    def CreatePackage(self, userId, packageName, paths, ):
        """Create Package
        Args:
            userId -- User GUID
            packageName -- Package Name
            paths -- Paths

        Return:
            CreatePackageResponse -- an instance of CreatePackageResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/packages/{packageName}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if packageName != None:
            resourcePath = resourcePath.replace('{packageName}', packageName)
        if paths != None:
            resourcePath = resourcePath.replace('{paths}', paths)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreatePackageResponse')
        return responseObject


    def MoveToTrash(self, userId, path, ):
        """Move to trash
        Args:
            userId -- User GUID
            path -- Path

        Return:
            FolderMoveResponse -- an instance of FolderMoveResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/trash/{*path}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'FolderMoveResponse')
        return responseObject


    def RestoreFromTrash(self, userId, path, ):
        """Restore from trash
        Args:
            userId -- User GUID
            path -- Path

        Return:
            DeleteResponse -- an instance of DeleteResponse"""

        # Parse inputs
        resourcePath = '/storage/{userId}/trash/{*path}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if path != None:
            resourcePath = resourcePath.replace('{path}', path)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DeleteResponse')
        return responseObject


