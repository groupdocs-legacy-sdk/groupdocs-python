#!/usr/bin/env python
"""
SignatureAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class SignatureAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def DelegateEnvelopeRecipient(self, userId, envelopeId, recipientId, ):
        """Delegate envelope recipient
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            recipientId -- Recipient GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/delegate?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def AddContact(self, userId, postData, ):
        """Add contact
        Args:
            userId -- User GUID
            postData -- Contact data

        Return:
            SignatureContactResponse -- an instance of SignatureContactResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/contact'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureContactResponse')
        return responseObject


    def ModifyContact(self, userId, contactId, postData=None, ):
        """Update contact
        Args:
            userId -- User GUID
            contactId -- Contact GUID
            postData -- Contact data

        Return:
            SignatureContactResponse -- an instance of SignatureContactResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/contacts/{contactId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if contactId != None:
            resourcePath = resourcePath.replace('{contactId}', contactId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureContactResponse')
        return responseObject


    def GetContacts(self, signatureSignatureInput=None, ):
        """Get contacts
        Args:
            signatureSignatureInput -- 

        Return:
            SignatureContactsResponse -- an instance of SignatureContactsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/contacts?firstName={firstName}&lastName={lastName}&email={email}&records={count}&page={page}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if signatureSignatureInput != None and signatureSignatureInput.page != None:
            queryParams['page'] = signatureSignatureInput.page

        if signatureSignatureInput != None and signatureSignatureInput.firstName != None:
            queryParams['firstName'] = signatureSignatureInput.firstName

        if signatureSignatureInput != None and signatureSignatureInput.lastName != None:
            queryParams['lastName'] = signatureSignatureInput.lastName

        if signatureSignatureInput != None and signatureSignatureInput.email != None:
            queryParams['email'] = signatureSignatureInput.email


        if signatureSignatureInput != None and signatureSignatureInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', signatureSignatureInput.userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureContactsResponse')
        return responseObject


    def DeleteContact(self, userId, contactId, ):
        """Delete contact
        Args:
            userId -- User GUID
            contactId -- Contact GUID

        Return:
            SignatureContactResponse -- an instance of SignatureContactResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/contacts/{contactId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if contactId != None:
            resourcePath = resourcePath.replace('{contactId}', contactId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureContactResponse')
        return responseObject


    def ImportContacts(self, userId, ):
        """Import contacts
        Args:
            userId -- User GUID

        Return:
            SignatureContactsImportResponse -- an instance of SignatureContactsImportResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/contacts'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureContactsImportResponse')
        return responseObject


    def GetSignatureEnvelopeResources(self, userId, ):
        """Get envelope recources
        Args:
            userId -- User GUID

        Return:
            SignatureEnvelopeResourcesResponse -- an instance of SignatureEnvelopeResourcesResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/resources'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeResourcesResponse')
        return responseObject


    def ModifySignatureEnvelopeFieldLocation(self, postData=None, signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput=None, ):
        """Modify signature envelope field location
        Args:
            postData -- Settings of the field location
            signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput -- 

        Return:
            SignatureEnvelopeFieldResponse -- an instance of SignatureEnvelopeFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.userId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.envelopeId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.documentId != None:
            resourcePath = resourcePath.replace('{documentId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.documentId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.recipientId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.fieldId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.locationId != None:
            resourcePath = resourcePath.replace('{locationId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput.locationId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeFieldResponse')
        return responseObject


    def GetSignatureTemplates(self, userId, page=None, ):
        """Get templates
        Args:
            userId -- User GUID
            page -- Page number

        Return:
            SignatureTemplatesResponse -- an instance of SignatureTemplatesResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates?records={count}&page={page}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        queryParams['page'] = page


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplatesResponse')
        return responseObject


    def GetSignatureTemplate(self, userId, templateId, ):
        """Get template
        Args:
            userId -- User GUID
            templateId -- Template GUID

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def CreateSignatureTemplate(self, userId, name=None, templateId=None, postData=None, ):
        """Create template
        Args:
            userId -- User GUID
            name -- Template name
            templateId -- Template GUID of the template that will be used to create the new template
            postData -- Settings of the template

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/template?name={name}&templateId={templateId}&envelopeId={envelopeId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['name'] = name
        queryParams['templateId'] = templateId


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def ModifySignatureTemplate(self, userId, templateId, postData=None, ):
        """Modify template
        Args:
            userId -- User GUID
            templateId -- Template GUID
            postData -- Settings of the template

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def RenameSignatureTemplate(self, userId, templateId, name, ):
        """Rename template
        Args:
            userId -- User GUID
            templateId -- Template GUID
            name -- New template name

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/tempalates/{templateId}?name={name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        queryParams['name'] = name


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def DeleteSignatureTemplate(self, userId, templateId, ):
        """Delete template
        Args:
            userId -- User GUID
            templateId -- Template GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def AddSignatureTemplateRecipient(self, userId, templateId, nickname, order=None, ):
        """Add recipient to the template
        Args:
            userId -- User GUID
            templateId -- Template GUID
            nickname -- Nickname of the recipient
            order -- Display order of the recipient

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/recipient?nickname={nickname}&role={roleId}&order={order}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['nickname'] = nickname
        queryParams['order'] = order


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def GetSignatureTemplateRecipients(self, userId, templateId, ):
        """Get template recipients
        Args:
            userId -- User GUID
            templateId -- Template GUID

        Return:
            SignatureTemplateRecipientsResponse -- an instance of SignatureTemplateRecipientsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/recipients'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateRecipientsResponse')
        return responseObject


    def DeleteSignatureTemplateRecipient(self, userId, templateId, recipientId, ):
        """Remove recipient from template
        Args:
            userId -- User GUID
            templateId -- Template GUID
            recipientId -- Recipient GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/recipients/{recipientId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def ModifySignatureTemplateRecipient(self, userId, templateId, nickname, order=None, ):
        """Update template recipient
        Args:
            userId -- User GUID
            templateId -- Template GUID
            nickname -- Nickname of the recipient
            order -- Display order of the recipient

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/recipient/{recipientId}?nickname={nickname}&role={roleId}&order={order}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        queryParams['nickname'] = nickname
        queryParams['order'] = order


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def AddSignatureTemplateDocument(self, userId, templateId, documentId, order=None, ):
        """Add document to template
        Args:
            userId -- User GUID
            templateId -- Template GUID
            documentId -- Document GUID
            order -- Display order of the document

        Return:
            SignatureTemplateDocumentResponse -- an instance of SignatureTemplateDocumentResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/document/{documentId}?order={order}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['order'] = order


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateDocumentResponse')
        return responseObject


    def GetSignatureTemplateDocuments(self, userId, templateId, ):
        """Get documents in template
        Args:
            userId -- User GUID
            templateId -- Template GUID

        Return:
            SignatureTemplateDocumentsResponse -- an instance of SignatureTemplateDocumentsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/documents'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateDocumentsResponse')
        return responseObject


    def DeleteSignatureTemplateDocument(self, userId, templateId, documentId, ):
        """Remove document from template
        Args:
            userId -- User GUID
            templateId -- Template GUID
            documentId -- Document GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/documents/{documentId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def AddSignatureTemplateField(self, postData=None, signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput=None, ):
        """Add signature template field
        Args:
            postData -- Settings of the field
            signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput -- 

        Return:
            SignatureTemplateFieldResponse -- an instance of SignatureTemplateFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.userId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.templateId != None:
            resourcePath = resourcePath.replace('{templateId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.templateId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.documentId != None:
            resourcePath = resourcePath.replace('{documentId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.documentId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput.recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateFieldResponse')
        return responseObject


    def ModifySignatureTemplateField(self, userId, templateId, documentId, fieldId, ):
        """Modify signature template field
        Args:
            userId -- User GUID
            templateId -- Template GUID
            documentId -- Document GUID
            fieldId -- Field GUID

        Return:
            SignatureTemplateFieldResponse -- an instance of SignatureTemplateFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/documents/{documentId}/field/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateFieldResponse')
        return responseObject


    def DeleteSignatureTemplateFieldLocation(self, userId, templateId, fieldId, locationId, ):
        """Delete signature template field location
        Args:
            userId -- User GUID
            templateId -- Template GUID
            fieldId -- Field GUID
            locationId -- Field location GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/fields/{fieldId}/locations/{locationId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)
        if locationId != None:
            resourcePath = resourcePath.replace('{locationId}', locationId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def ModifySignatureTemplateFieldLocation(self, postData=None, signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput=None, ):
        """Modify signature template field location
        Args:
            postData -- Settings of the field location
            signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput -- 

        Return:
            SignatureTemplateFieldResponse -- an instance of SignatureTemplateFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.userId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.templateId != None:
            resourcePath = resourcePath.replace('{templateId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.templateId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.documentId != None:
            resourcePath = resourcePath.replace('{documentId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.documentId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.recipientId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.fieldId)
        if signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput != None and signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.locationId != None:
            resourcePath = resourcePath.replace('{locationId}', signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput.locationId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateFieldResponse')
        return responseObject


    def GetSignatureTemplateFields(self, userId, templateId, documentId, recipientId, ):
        """Get template fields
        Args:
            userId -- User GUID
            templateId -- Template GUID
            documentId -- Document GUID
            recipientId -- Recipient GUID

        Return:
            SignatureTemplateFieldsResponse -- an instance of SignatureTemplateFieldsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/fields?document={documentId}&recipient={recipientId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateFieldsResponse')
        return responseObject


    def DeleteSignatureTemplateField(self, userId, templateId, fieldId, ):
        """Delete signature template field
        Args:
            userId -- User GUID
            templateId -- Template GUID
            fieldId -- Field GUID

        Return:
            SignatureTemplateResponse -- an instance of SignatureTemplateResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/templates/{templateId}/fields/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if templateId != None:
            resourcePath = resourcePath.replace('{templateId}', templateId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureTemplateResponse')
        return responseObject


    def GetSignatures(self, userId, ):
        """Get user signatures
        Args:
            userId -- User GUID

        Return:
            SignatureSignaturesResponse -- an instance of SignatureSignaturesResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/signatures'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureSignaturesResponse')
        return responseObject


    def DeleteSignature(self, userId, signatureId, ):
        """Delete user signature
        Args:
            userId -- User GUID
            signatureId -- Signature GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/signatures/{signatureId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if signatureId != None:
            resourcePath = resourcePath.replace('{signatureId}', signatureId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def CreateSignature(self, userId, name, postData=None, ):
        """Create user signature
        Args:
            userId -- User GUID
            name -- Signature name
            postData -- Settings of the field

        Return:
            SignatureSignatureResponse -- an instance of SignatureSignatureResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/signature?name={name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['name'] = name


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureSignatureResponse')
        return responseObject


    def AddSignatureImage(self, userId, signatureId, type, dataFrom, ):
        """Add signature image
        Args:
            userId -- User GUID
            signatureId -- Signature GUID
            type -- 0: Signature, 1: Initials
            dataFrom -- Url to document containing the image

        Return:
            SignatureSignatureResponse -- an instance of SignatureSignatureResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/signature/{signatureId}/image?type={type}&datafrom={dataFrom}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['type'] = type
        queryParams['dataFrom'] = dataFrom


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if signatureId != None:
            resourcePath = resourcePath.replace('{signatureId}', signatureId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureSignatureResponse')
        return responseObject


    def FillEnvelopeField(self, postData=None, signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput=None, ):
        """Fill envelope field
        Args:
            postData -- Data to be placed in field
            signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput -- 

        Return:
            SignatureEnvelopeFieldResponse -- an instance of SignatureEnvelopeFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}?signatureId={signatureId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.userId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.envelopeId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.documentId != None:
            resourcePath = resourcePath.replace('{documentId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.documentId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.recipientId)
        if signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput.fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeFieldResponse')
        return responseObject


    def SignEnvelope(self, userId, envelopeId, recipientId, ):
        """Sign envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            recipientId -- Recipient GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/sign'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def DeclineEnvelope(self, userId, envelopeId, recipientId, ):
        """Decline envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            recipientId -- Recipient GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/decline'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def GetSignatureEnvelopes(self, userId, statusId=None, page=None, recipientEmail=None, date=None, name=None, ):
        """Get signature envelopes
        Args:
            userId -- User GUID
            statusId -- Filter envelopes by statusId
            page -- Show records for page number
            recipientEmail -- Filter envelopes by recipient email
            date -- Filter envelopes by date
            name -- Filter envelopes by name

        Return:
            SignatureEnvelopesResponse -- an instance of SignatureEnvelopesResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes?statusId={statusId}&records={count}&page={page}&document={originalDocumentMD5}&recipient={recipientEmail}&date={date}&name={name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        queryParams['statusId'] = statusId
        queryParams['page'] = page
        queryParams['recipientEmail'] = recipientEmail
        queryParams['date'] = date
        queryParams['name'] = name


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopesResponse')
        return responseObject


    def GetRecipientSignatureEnvelopes(self, userId, statusId=None, page=None, ):
        """Get signature envelopes where the user is recipient
        Args:
            userId -- User GUID
            statusId -- Filter envelopes by statusId
            page -- Show records for page number

        Return:
            SignatureEnvelopesResponse -- an instance of SignatureEnvelopesResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/recipient?statusId={statusId}&records={count}&page={page}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        queryParams['statusId'] = statusId
        queryParams['page'] = page


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopesResponse')
        return responseObject


    def GetSignatureEnvelope(self, userId, envelopeId, ):
        """Get signature envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            SignatureEnvelopeResponse -- an instance of SignatureEnvelopeResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeResponse')
        return responseObject


    def CreateSignatureEnvelope(self, userId, name=None, postData=None, ):
        """Create signature envelope
        Args:
            userId -- User GUID
            name -- Envelope name
            postData -- Settings of the new envelope

        Return:
            SignatureEnvelopeResponse -- an instance of SignatureEnvelopeResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelope?name={name}&templateId={templateId}&envelopeId={envelopeId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['name'] = name


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeResponse')
        return responseObject


    def ModifySignatureEnvelope(self, userId, envelopeId, postData=None, ):
        """Modify signature envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            postData -- Settings of the envelope

        Return:
            SignatureEnvelopeResponse -- an instance of SignatureEnvelopeResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeResponse')
        return responseObject


    def RenameSignatureEnvelope(self, userId, envelopeId, name, ):
        """Rename signature envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            name -- New envelope name

        Return:
            SignatureEnvelopeResponse -- an instance of SignatureEnvelopeResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}?name={name}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        queryParams['name'] = name


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeResponse')
        return responseObject


    def DeleteSignatureEnvelope(self, userId, envelopeId, ):
        """Delete signature envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def GetRolesList(self, userId, ):
        """Get signature roles
        Args:
            userId -- User GUID

        Return:
            SignatureRolesResponse -- an instance of SignatureRolesResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/roles?id={roleId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureRolesResponse')
        return responseObject


    def GetFieldsList(self, userId, ):
        """Get signature fields
        Args:
            userId -- User GUID

        Return:
            SignatureFieldsResponse -- an instance of SignatureFieldsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/fields?id={fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureFieldsResponse')
        return responseObject


    def CreateSignatureField(self, userId, postData=None, ):
        """Create signature field
        Args:
            userId -- User GUID
            postData -- Settings of the new field

        Return:
            SignatureFieldResponse -- an instance of SignatureFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/field'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureFieldResponse')
        return responseObject


    def ModifySignatureField(self, userId, fieldId, postData=None, ):
        """Modify signature field
        Args:
            userId -- User GUID
            fieldId -- Field GUID
            postData -- Settings of the field

        Return:
            SignatureFieldResponse -- an instance of SignatureFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/fields/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureFieldResponse')
        return responseObject


    def DeleteSignatureField(self, userId, fieldId, ):
        """Delete signature field
        Args:
            userId -- User GUID
            fieldId -- Field GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/fields/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def AddSignatureEnvelopeRecipient(self, userId, order=None, ):
        """Add signature envelope recipient
        Args:
            userId -- User GUID
            order -- Recipient order

        Return:
            SignatureEnvelopeRecipientResponse -- an instance of SignatureEnvelopeRecipientResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipient?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['order'] = order


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeRecipientResponse')
        return responseObject


    def GetSignatureEnvelopeRecipients(self, userId, envelopeId, ):
        """Get signature envelope recipients
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            SignatureEnvelopeRecipientsResponse -- an instance of SignatureEnvelopeRecipientsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipients'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeRecipientsResponse')
        return responseObject


    def DeleteSignatureEnvelopeRecipient(self, userId, envelopeId, recipientId, ):
        """Delete signature envelope recipient
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            recipientId -- Recipient GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipients/{recipientId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def ModifySignatureEnvelopeRecipient(self, userId, order=None, ):
        """Modify signature envelope recipient
        Args:
            userId -- User GUID
            order -- Recipient order

        Return:
            SignatureEnvelopeRecipientResponse -- an instance of SignatureEnvelopeRecipientResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        queryParams['order'] = order


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeRecipientResponse')
        return responseObject


    def AddSignatureEnvelopeDocument(self, userId, envelopeId, documentId, order=None, ):
        """Add document in envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            documentId -- Document GUID
            order -- Document order

        Return:
            SignatureEnvelopeDocumentResponse -- an instance of SignatureEnvelopeDocumentResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/document/{documentId}?order={order}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        queryParams['order'] = order


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeDocumentResponse')
        return responseObject


    def GetSignatureEnvelopeDocuments(self, userId, envelopeId, ):
        """Get documents in envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            SignatureEnvelopeDocumentsResponse -- an instance of SignatureEnvelopeDocumentsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeDocumentsResponse')
        return responseObject


    def GetSignedEnvelopeDocument(self, userId, envelopeId, documentId, ):
        """Get signed envelope document
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            documentId -- Document GUID

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/document/{documentId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def GetSignedEnvelopeDocuments(self, userId, envelopeId, ):
        """Get signed envelope documents
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents/get'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def DeleteSignatureEnvelopeDocument(self, userId, envelopeId, documentId, ):
        """Delete document from envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            documentId -- Document GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def AddSignatureEnvelopeField(self, userId, envelopeId, documentId, recipientId, fieldId, postData=None, ):
        """Add signature field for document in envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            documentId -- Document GUID
            recipientId -- Recipient GUID
            fieldId -- Field GUID
            postData -- Settings of the field

        Return:
            SignatureEnvelopeFieldsResponse -- an instance of SignatureEnvelopeFieldsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeFieldsResponse')
        return responseObject


    def GetSignatureEnvelopeFields(self, userId, envelopeId, documentId, recipientId, ):
        """Get signature field for document in envelope per recipient
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            documentId -- Document GUID
            recipientId -- Recipient GUID

        Return:
            SignatureEnvelopeFieldsResponse -- an instance of SignatureEnvelopeFieldsResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/fields?document={documentId}&recipient={recipientId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if documentId != None:
            resourcePath = resourcePath.replace('{documentId}', documentId)
        if recipientId != None:
            resourcePath = resourcePath.replace('{recipientId}', recipientId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeFieldsResponse')
        return responseObject


    def DeleteSignatureEnvelopeField(self, userId, envelopeId, fieldId, ):
        """Delete signature envelope field
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            fieldId -- Field GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def ModifySignatureEnvelopeField(self, postData=None, signatureSignatureInputEnvelopesInputDocumentsInputFieldInput=None, ):
        """Modify signature envelope field
        Args:
            postData -- Settings of the field
            signatureSignatureInputEnvelopesInputDocumentsInputFieldInput -- 

        Return:
            SignatureEnvelopeFieldResponse -- an instance of SignatureEnvelopeFieldResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/field/{fieldId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        if signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.userId)
        if signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.envelopeId)
        if signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.documentId != None:
            resourcePath = resourcePath.replace('{documentId}', signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.documentId)
        if signatureSignatureInputEnvelopesInputDocumentsInputFieldInput != None and signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', signatureSignatureInputEnvelopesInputDocumentsInputFieldInput.fieldId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureEnvelopeFieldResponse')
        return responseObject


    def ArchiveSignatureEnvelope(self, userId, envelopeId, ):
        """Archive envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/archive'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def SignatureEnvelopeSend(self, userId, envelopeId, ):
        """Send envelope
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/send'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


    def DeleteSignatureEnvelopeFieldLocation(self, userId, envelopeId, fieldId, locationId, ):
        """Remove signature envelope field location
        Args:
            userId -- User GUID
            envelopeId -- Envelope GUID
            fieldId -- Field GUID
            locationId -- Field location GUID

        Return:
            SignatureStatusResponse -- an instance of SignatureStatusResponse"""

        # Parse inputs
        resourcePath = '/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}/locations/{locationId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if envelopeId != None:
            resourcePath = resourcePath.replace('{envelopeId}', envelopeId)
        if fieldId != None:
            resourcePath = resourcePath.replace('{fieldId}', fieldId)
        if locationId != None:
            resourcePath = resourcePath.replace('{locationId}', locationId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SignatureStatusResponse')
        return responseObject


