#!/usr/bin/env python
"""
DocAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class DocAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def ViewDocument(self, docDocInputFilesInput=None, ):
        """View Document
        Args:
            docDocInputFilesInput -- 

        Return:
            ViewDocumentResponse -- an instance of ViewDocumentResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/thumbnails?page_number={pageNumber}&page_count={pageCount}&quality={quality}&use_pdf={usePdf}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if docDocInputFilesInput != None and docDocInputFilesInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', docDocInputFilesInput.userId)
        if docDocInputFilesInput != None and docDocInputFilesInput.fileId != None:
            resourcePath = resourcePath.replace('{fileId}', docDocInputFilesInput.fileId)
        if docDocInputFilesInput != None and docDocInputFilesInput.pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', docDocInputFilesInput.pageNumber)
        if docDocInputFilesInput != None and docDocInputFilesInput.pageCount != None:
            resourcePath = resourcePath.replace('{pageCount}', docDocInputFilesInput.pageCount)
        if docDocInputFilesInput != None and docDocInputFilesInput.quality != None:
            resourcePath = resourcePath.replace('{quality}', docDocInputFilesInput.quality)
        if docDocInputFilesInput != None and docDocInputFilesInput.usePdf != None:
            resourcePath = resourcePath.replace('{usePdf}', docDocInputFilesInput.usePdf)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ViewDocumentResponse')
        return responseObject


    def GetDocumentViews(self, userId, startIndex, pageSize, ):
        """Get Document Views
        Args:
            userId -- User GUID
            startIndex -- Use Pdf
            pageSize -- Page size

        Return:
            DocumentViewsResponse -- an instance of DocumentViewsResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/views?page_index={startIndex}&page_size={pageSize}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if startIndex != None:
            resourcePath = resourcePath.replace('{startIndex}', startIndex)
        if pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', pageSize)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DocumentViewsResponse')
        return responseObject


    def ShareDocument(self, userId, fileId, sharers, ):
        """Share document
        Args:
            userId -- User GUID
            fileId -- File GUID
            sharers -- Sharers

        Return:
            SharedUsersResponse -- an instance of SharedUsersResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/sharers'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if sharers != None:
            resourcePath = resourcePath.replace('{sharers}', sharers)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SharedUsersResponse')
        return responseObject


    def UnshareDocument(self, userId, fileId, ):
        """Unshare document
        Args:
            userId -- User GUID
            fileId -- File GUID

        Return:
            SharedUsersResponse -- an instance of SharedUsersResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/sharers'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SharedUsersResponse')
        return responseObject


    def GetFolderSharers(self, userId, folderId, ):
        """Get folder sharers
        Args:
            userId -- User GUID
            folderId -- Folder Id

        Return:
            SharedUsersResponse -- an instance of SharedUsersResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/folders/{folderId}/sharers'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if folderId != None:
            resourcePath = resourcePath.replace('{folderId}', folderId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SharedUsersResponse')
        return responseObject


    def ShareFolder(self, userId, folderId, sharers, ):
        """Share folder
        Args:
            userId -- User GUID
            folderId -- Folder Id
            sharers -- Sharers

        Return:
            SharedUsersResponse -- an instance of SharedUsersResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/folders/{folderId}/sharers'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if folderId != None:
            resourcePath = resourcePath.replace('{folderId}', folderId)
        if sharers != None:
            resourcePath = resourcePath.replace('{sharers}', sharers)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SharedUsersResponse')
        return responseObject


    def UnshareFolder(self, userId, folderId, ):
        """Unshare folder
        Args:
            userId -- User GUID
            folderId -- Folder Id

        Return:
            SharedUsersResponse -- an instance of SharedUsersResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/folders/{folderId}/sharers'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if folderId != None:
            resourcePath = resourcePath.replace('{folderId}', folderId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SharedUsersResponse')
        return responseObject


    def SetDocumentAccessMode(self, userId, fileId, mode, ):
        """Set document access mode
        Args:
            userId -- User GUID
            fileId -- File GUID
            mode -- Mode
                    Allowed values are - 0,1,2,3,255
        Return:
            DocumentAccessInfoResponse -- an instance of DocumentAccessInfoResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/accessinfo?mode={mode}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if mode != None:
            resourcePath = resourcePath.replace('{mode}', mode)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DocumentAccessInfoResponse')
        return responseObject


    def GetDocumentAccessInfo(self, userId, fileId, ):
        """Get document access info
        Args:
            userId -- User GUID
            fileId -- File GUID

        Return:
            DocumentAccessInfoResponse -- an instance of DocumentAccessInfoResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/accessinfo'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DocumentAccessInfoResponse')
        return responseObject


    def GetDocumentMetadata(self, userId, fileId, ):
        """Get document metadata
        Args:
            userId -- User GUID
            fileId -- File GUID

        Return:
            GetDocumentInfoResponse -- an instance of GetDocumentInfoResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/metadata'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetDocumentInfoResponse')
        return responseObject


    def SetDocumentUserStatus(self, userId, fileId, status, ):
        """Set document user status
        Args:
            userId -- User GUID
            fileId -- File GUID
            status -- Status

        Return:
            DocumentUserStatusResponse -- an instance of DocumentUserStatusResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/sharer'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if status != None:
            resourcePath = resourcePath.replace('{status}', status)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'DocumentUserStatusResponse')
        return responseObject


    def GetSharedDocuments(self, docDocInputSharesInput=None, ):
        """Get shared documents
        Args:
            docDocInputSharesInput -- 

        Return:
            SharedDocumentsResponse -- an instance of SharedDocumentsResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/shares/{sharesTypes}?page_index={pageIndex}&page_size={pageSize}&order_by={orderBy}&order_asc={orderAsc}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if docDocInputSharesInput != None and docDocInputSharesInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', docDocInputSharesInput.userId)
        if docDocInputSharesInput != None and docDocInputSharesInput.sharesTypes != None:
            resourcePath = resourcePath.replace('{sharesTypes}', docDocInputSharesInput.sharesTypes)
        if docDocInputSharesInput != None and docDocInputSharesInput.pageIndex != None:
            resourcePath = resourcePath.replace('{pageIndex}', docDocInputSharesInput.pageIndex)
        if docDocInputSharesInput != None and docDocInputSharesInput.pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', docDocInputSharesInput.pageSize)
        if docDocInputSharesInput != None and docDocInputSharesInput.orderBy != None:
            resourcePath = resourcePath.replace('{orderBy}', docDocInputSharesInput.orderBy)
        if docDocInputSharesInput != None and docDocInputSharesInput.orderAsc != None:
            resourcePath = resourcePath.replace('{orderAsc}', docDocInputSharesInput.orderAsc)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'SharedDocumentsResponse')
        return responseObject


    def GetTemplateFields(self, userId, fileId, includeGeometry, ):
        """Get template fields
        Args:
            userId -- User GUID
            fileId -- File GUID
            includeGeometry -- Include geometry

        Return:
            TemplateFieldsResponse -- an instance of TemplateFieldsResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/fields?include_geometry={includeGeometry}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if includeGeometry != None:
            resourcePath = resourcePath.replace('{includeGeometry}', includeGeometry)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'TemplateFieldsResponse')
        return responseObject


    def GetDocumentFormats(self, userId, fileId, ):
        """Get document formats
        Args:
            userId -- User GUID
            fileId -- File GUID

        Return:
            GetDocumentForeignTypesResponse -- an instance of GetDocumentForeignTypesResponse"""

        # Parse inputs
        resourcePath = '/doc/{userId}/files/{fileId}/formats'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetDocumentForeignTypesResponse')
        return responseObject


