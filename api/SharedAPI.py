#!/usr/bin/env python
"""
SharedAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class SharedAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def Download(self, guid, fileName, render, ):
        """Download
        Args:
            guid -- GUID
            fileName -- File name
            render -- Render

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/shared/files/{guid}?filename={fileName}&render={render}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if guid != None:
            resourcePath = resourcePath.replace('{guid}', guid)
        if fileName != None:
            resourcePath = resourcePath.replace('{fileName}', fileName)
        if render != None:
            resourcePath = resourcePath.replace('{render}', render)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def GetImage(self, sharedSharedInputFilesInputPagesInput=None, ):
        """Get image
        Args:
            sharedSharedInputFilesInputPagesInput -- 

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/shared/files/{guid}/pages/{folio}/{dimension}?quality={quality}&use_pdf={usePdf}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if sharedSharedInputFilesInputPagesInput != None and sharedSharedInputFilesInputPagesInput.guid != None:
            resourcePath = resourcePath.replace('{guid}', sharedSharedInputFilesInputPagesInput.guid)
        if sharedSharedInputFilesInputPagesInput != None and sharedSharedInputFilesInputPagesInput.folio != None:
            resourcePath = resourcePath.replace('{folio}', sharedSharedInputFilesInputPagesInput.folio)
        if sharedSharedInputFilesInputPagesInput != None and sharedSharedInputFilesInputPagesInput.dimension != None:
            resourcePath = resourcePath.replace('{dimension}', sharedSharedInputFilesInputPagesInput.dimension)
        if sharedSharedInputFilesInputPagesInput != None and sharedSharedInputFilesInputPagesInput.quality != None:
            resourcePath = resourcePath.replace('{quality}', sharedSharedInputFilesInputPagesInput.quality)
        if sharedSharedInputFilesInputPagesInput != None and sharedSharedInputFilesInputPagesInput.usePdf != None:
            resourcePath = resourcePath.replace('{usePdf}', sharedSharedInputFilesInputPagesInput.usePdf)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def GetImageUrl(self, guid, folio, dimension, quality, usePdf, ):
        """Get image url
        Args:
            guid -- GUID
            folio -- Folio
            dimension -- Dimension
            quality -- Quality
            usePdf -- Use Pdf

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/shared/files/{guid}/pages/{folio}/{dimension}/url?quality={quality}&use_pdf={usePdf}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if guid != None:
            resourcePath = resourcePath.replace('{guid}', guid)
        if folio != None:
            resourcePath = resourcePath.replace('{folio}', folio)
        if dimension != None:
            resourcePath = resourcePath.replace('{dimension}', dimension)
        if quality != None:
            resourcePath = resourcePath.replace('{quality}', quality)
        if usePdf != None:
            resourcePath = resourcePath.replace('{usePdf}', usePdf)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def GetXml(self, guid, ):
        """Get xml
        Args:
            guid -- GUID

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/shared/files/{guid}/xml'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if guid != None:
            resourcePath = resourcePath.replace('{guid}', guid)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def GetPackage(self, path, ):
        """Get package
        Args:
            path -- Path

        Return:
            str -- an instance of str"""

        # Parse inputs
        resourcePath = '/shared/packages/{*path}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if path != None:
            resourcePath = resourcePath.replace('{path}', path)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'str')
        return responseObject


    def ViewDocument(self, sharedSharedInputFilesInput=None, ):
        """View document
        Args:
            sharedSharedInputFilesInput -- 

        Return:
            ViewDocumentResponse -- an instance of ViewDocumentResponse"""

        # Parse inputs
        resourcePath = '/shared/files/{guid}/thumbnails?page_number={pageNumber}&page_count={pageCount}&quality={quality}&use_pdf={usePdf}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if sharedSharedInputFilesInput != None and sharedSharedInputFilesInput.guid != None:
            resourcePath = resourcePath.replace('{guid}', sharedSharedInputFilesInput.guid)
        if sharedSharedInputFilesInput != None and sharedSharedInputFilesInput.pageNumber != None:
            resourcePath = resourcePath.replace('{pageNumber}', sharedSharedInputFilesInput.pageNumber)
        if sharedSharedInputFilesInput != None and sharedSharedInputFilesInput.pageCount != None:
            resourcePath = resourcePath.replace('{pageCount}', sharedSharedInputFilesInput.pageCount)
        if sharedSharedInputFilesInput != None and sharedSharedInputFilesInput.quality != None:
            resourcePath = resourcePath.replace('{quality}', sharedSharedInputFilesInput.quality)
        if sharedSharedInputFilesInput != None and sharedSharedInputFilesInput.usePdf != None:
            resourcePath = resourcePath.replace('{usePdf}', sharedSharedInputFilesInput.usePdf)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ViewDocumentResponse')
        return responseObject


