#!/usr/bin/env python
"""
AsyncAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class AsyncAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetJob(self, userId, jobId, ):
        """Get job
        Args:
            userId -- User GUID
            jobId -- Job id

        Return:
            GetJobResponse -- an instance of GetJobResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/{jobId}?format=xml'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetJobResponse')
        return responseObject


    def GetJobJson(self, userId, jobId, ):
        """Get job json
        Args:
            userId -- User GUID
            jobId -- Job id

        Return:
            GetJobResponse -- an instance of GetJobResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/{jobId}?format=json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetJobResponse')
        return responseObject


    def GetJobDocuments(self, userId, jobId, ):
        """Get job documents
        Args:
            userId -- User GUID
            jobId -- Job id

        Return:
            GetJobDocumentsResponse -- an instance of GetJobDocumentsResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/{jobId}/documents?format={format}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetJobDocumentsResponse')
        return responseObject


    def CreateJob(self, userId, postData, ):
        """Create job
        Args:
            userId -- User GUID
            postData -- Job

        Return:
            CreateJobResponse -- an instance of CreateJobResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreateJobResponse')
        return responseObject


    def AddJobDocument(self, userId, jobId, fileId, formats, ):
        """Add job document
        Args:
            userId -- User GUID
            jobId -- Job id
            fileId -- File GUID
            formats -- Formats

        Return:
            AddJobDocumentResponse -- an instance of AddJobDocumentResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/{jobId}/files/{fileId}?out_formats={formats}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)
        if fileId != None:
            resourcePath = resourcePath.replace('{fileId}', fileId)
        if formats != None:
            resourcePath = resourcePath.replace('{formats}', formats)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddJobDocumentResponse')
        return responseObject


    def AddJobDocumentUrl(self, userId, jobId, absoluteUrl, formats, ):
        """Add job document url
        Args:
            userId -- User GUID
            jobId -- Job id
            absoluteUrl -- Absolute Url
            formats -- Formats

        Return:
            AddJobDocumentResponse -- an instance of AddJobDocumentResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/{jobId}/urls?absolute_url={absoluteUrl}&out_formats={formats}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)
        if absoluteUrl != None:
            resourcePath = resourcePath.replace('{absoluteUrl}', absoluteUrl)
        if formats != None:
            resourcePath = resourcePath.replace('{formats}', formats)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddJobDocumentResponse')
        return responseObject


    def UpdateJob(self, userId, jobId, postData, ):
        """Update job
        Args:
            userId -- User GUID
            jobId -- Job id
            postData -- Job

        Return:
            UpdateJobResponse -- an instance of UpdateJobResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/{jobId}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if jobId != None:
            resourcePath = resourcePath.replace('{jobId}', jobId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateJobResponse')
        return responseObject


    def GetJobs(self, asyncAsyncInput=None, ):
        """Get jobs
        Args:
            asyncAsyncInput -- 

        Return:
            GetJobsResponse -- an instance of GetJobsResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs?page={pageIndex}&count={pageSize}&actions={actions}&excluded_actions={excludedActions}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if asyncAsyncInput != None and asyncAsyncInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', asyncAsyncInput.userId)
        if asyncAsyncInput != None and asyncAsyncInput.pageIndex != None:
            resourcePath = resourcePath.replace('{pageIndex}', asyncAsyncInput.pageIndex)
        if asyncAsyncInput != None and asyncAsyncInput.pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', asyncAsyncInput.pageSize)
        if asyncAsyncInput != None and asyncAsyncInput.actions != None:
            resourcePath = resourcePath.replace('{actions}', asyncAsyncInput.actions)
        if asyncAsyncInput != None and asyncAsyncInput.excludedActions != None:
            resourcePath = resourcePath.replace('{excludedActions}', asyncAsyncInput.excludedActions)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetJobsResponse')
        return responseObject


    def GetJobsDocuments(self, asyncAsyncInputJobsInput=None, ):
        """Get job documents
        Args:
            asyncAsyncInputJobsInput -- 

        Return:
            GetJobsDocumentsResponse -- an instance of GetJobsDocumentsResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/jobs/documents?page={pageIndex}&count={pageSize}&actions={actions}&excluded_actions={excludedActions}&order_by={orderBy}&order_asc={orderAsc}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', asyncAsyncInputJobsInput.userId)
        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.pageIndex != None:
            resourcePath = resourcePath.replace('{pageIndex}', asyncAsyncInputJobsInput.pageIndex)
        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.pageSize != None:
            resourcePath = resourcePath.replace('{pageSize}', asyncAsyncInputJobsInput.pageSize)
        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.actions != None:
            resourcePath = resourcePath.replace('{actions}', asyncAsyncInputJobsInput.actions)
        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.excludedActions != None:
            resourcePath = resourcePath.replace('{excludedActions}', asyncAsyncInputJobsInput.excludedActions)
        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.orderBy != None:
            resourcePath = resourcePath.replace('{orderBy}', asyncAsyncInputJobsInput.orderBy)
        if asyncAsyncInputJobsInput != None and asyncAsyncInputJobsInput.orderAsc != None:
            resourcePath = resourcePath.replace('{orderAsc}', asyncAsyncInputJobsInput.orderAsc)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetJobsDocumentsResponse')
        return responseObject


    def Convert(self, asyncAsyncInputFilesInput=None, ):
        """Convert
        Args:
            asyncAsyncInputFilesInput -- 

        Return:
            ConvertResponse -- an instance of ConvertResponse"""

        # Parse inputs
        resourcePath = '/async/{userId}/files/{fileId}?new_type={targetType}&email_results={emailResults}&new_description={description}&print_script={printScript}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if asyncAsyncInputFilesInput != None and asyncAsyncInputFilesInput.userId != None:
            resourcePath = resourcePath.replace('{userId}', asyncAsyncInputFilesInput.userId)
        if asyncAsyncInputFilesInput != None and asyncAsyncInputFilesInput.fileId != None:
            resourcePath = resourcePath.replace('{fileId}', asyncAsyncInputFilesInput.fileId)
        if asyncAsyncInputFilesInput != None and asyncAsyncInputFilesInput.targetType != None:
            resourcePath = resourcePath.replace('{targetType}', asyncAsyncInputFilesInput.targetType)
        if asyncAsyncInputFilesInput != None and asyncAsyncInputFilesInput.emailResults != None:
            resourcePath = resourcePath.replace('{emailResults}', asyncAsyncInputFilesInput.emailResults)
        if asyncAsyncInputFilesInput != None and asyncAsyncInputFilesInput.description != None:
            resourcePath = resourcePath.replace('{description}', asyncAsyncInputFilesInput.description)
        if asyncAsyncInputFilesInput != None and asyncAsyncInputFilesInput.printScript != None:
            resourcePath = resourcePath.replace('{printScript}', asyncAsyncInputFilesInput.printScript)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ConvertResponse')
        return responseObject


