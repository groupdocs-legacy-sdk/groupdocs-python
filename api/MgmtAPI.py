#!/usr/bin/env python
"""
MgmtAPI.py
Copyright 2011 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
import model

class MgmtAPI(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    def GetUserProfile(self, userId, ):
        """Get user profile
        Args:
            userId -- User GUID

        Return:
            UserInfoResponse -- an instance of UserInfoResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{userId}/profile'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserInfoResponse')
        return responseObject


    def UpdateUserProfile(self, userId, postData, ):
        """Update user profile
        Args:
            userId -- User GUID
            postData -- Info

        Return:
            UpdateUserResponse -- an instance of UpdateUserResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{userId}/profile'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateUserResponse')
        return responseObject


    def ChangeUserPassword(self, userId, postData, ):
        """Change user password
        Args:
            userId -- User GUID
            postData -- Password

        Return:
            ChangePasswordResponse -- an instance of ChangePasswordResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{userId}/profile/password'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ChangePasswordResponse')
        return responseObject


    def GetUserProfileByResetToken(self, callerId, token, ):
        """Get user profile by reset token
        Args:
            callerId -- Caller GUID
            token -- Token

        Return:
            UserInfoResponse -- an instance of UserInfoResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/reset-tokens?token={token}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if token != None:
            resourcePath = resourcePath.replace('{token}', token)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserInfoResponse')
        return responseObject


    def GetUserProfileByVerifToken(self, callerId, token, ):
        """Get user profile by verif token
        Args:
            callerId -- Caller GUID
            token -- Token

        Return:
            UserInfoResponse -- an instance of UserInfoResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/verif-tokens?token={token}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if token != None:
            resourcePath = resourcePath.replace('{token}', token)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserInfoResponse')
        return responseObject


    def GetUserProfileByClaimedToken(self, callerId, token, ):
        """Get user profile by claimed token
        Args:
            callerId -- Caller GUID
            token -- Token

        Return:
            UserInfoResponse -- an instance of UserInfoResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/claimed-tokens?token={token}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if token != None:
            resourcePath = resourcePath.replace('{token}', token)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserInfoResponse')
        return responseObject


    def GetAlienUserProfile(self, callerId, userId, ):
        """Get alien user profile
        Args:
            callerId -- Caller GUID
            userId -- User GUID

        Return:
            UserInfoResponse -- an instance of UserInfoResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/users/{userId}/profile'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserInfoResponse')
        return responseObject


    def UpdateAlienUserProfile(self, callerId, userId, postData, ):
        """Update alien user profile
        Args:
            callerId -- Caller GUID
            userId -- User GUID
            postData -- Info

        Return:
            UpdateUserResponse -- an instance of UpdateUserResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/users/{userId}/profile'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateUserResponse')
        return responseObject


    def CreateUser(self, callerId, postData, ):
        """Create user
        Args:
            callerId -- Caller GUID
            postData -- Payload

        Return:
            CreateUserResponse -- an instance of CreateUserResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/users'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'CreateUserResponse')
        return responseObject


    def CreateUserLogin(self, callerId, userId, password, ):
        """Create user login
        Args:
            callerId -- Caller GUID
            userId -- User GUID
            password -- Password

        Return:
            UserInfoResponse -- an instance of UserInfoResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/users/{userId}/logins'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if password != None:
            resourcePath = resourcePath.replace('{password}', password)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UserInfoResponse')
        return responseObject


    def ChangeAlienUserPassword(self, callerId, userId, postData, ):
        """Change alien user password
        Args:
            callerId -- Caller GUID
            userId -- User GUID
            postData -- Password

        Return:
            ChangePasswordResponse -- an instance of ChangePasswordResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/users/{userId}/password'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ChangePasswordResponse')
        return responseObject


    def ResetUserPassword(self, callerId, userId, ):
        """Reset user password
        Args:
            callerId -- Caller GUID
            userId -- User GUID

        Return:
            ResetPasswordResponse -- an instance of ResetPasswordResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{callerId}/users/{userId}/password'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}


        if callerId != None:
            resourcePath = resourcePath.replace('{callerId}', callerId)
        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'ResetPasswordResponse')
        return responseObject


    def GetStorageProviders(self, userId, ):
        """Returns user's storage providers.
        Args:
            userId -- User GUID

        Return:
            GetStorageProvidersResponse -- an instance of GetStorageProvidersResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{userId}/storages'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'GET'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          None, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'GetStorageProvidersResponse')
        return responseObject


    def AddStorageProvider(self, userId, provider, postData, ):
        """Adds a new storage provider configuration.
        Args:
            userId -- User GUID
            provider -- Storage provider name
            postData -- Storage provider configuration details

        Return:
            AddStorageProviderResponse -- an instance of AddStorageProviderResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{userId}/storages/{provider}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'POST'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if provider != None:
            resourcePath = resourcePath.replace('{provider}', provider)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'AddStorageProviderResponse')
        return responseObject


    def UpdateStorageProvider(self, userId, provider, postData, ):
        """Updates user's storage provider configuration.
        Args:
            userId -- User GUID
            provider -- Storage provider name
            postData -- Storage provider configuration details

        Return:
            UpdateStorageProviderResponse -- an instance of UpdateStorageProviderResponse"""

        # Parse inputs
        resourcePath = '/mgmt/{userId}/storages/{provider}'
        resourcePath = resourcePath.replace('{format}', 'json')
        resourcePath = resourcePath.replace('*', '')
        method = 'PUT'

        queryParams = {}
        headerParams = {}


        if userId != None:
            resourcePath = resourcePath.replace('{userId}', userId)
        if provider != None:
            resourcePath = resourcePath.replace('{provider}', provider)


        # Make the API Call
        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response,
                                                    'UpdateStorageProviderResponse')
        return responseObject


